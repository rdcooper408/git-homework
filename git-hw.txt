do 2.13.2; 2.13.3; and 2.13.4 (bonus points
for the last part of 2.13.4!)


2.13.2
# This displays the first 3 lines of the fasta file
  225  head -n3 407228326.fasta
  
#this counts the number of lines in each file
  226  wc -l *.fasta
  
#Display data and skip the first two lines
  227  tail -n+2 407228326.fasta
  
#Removes the new line command in the data file
  228  tail -n+2 407228326.fasta | tr -d "\n"
  
#Returns the number of characters
  229  tail -n+2 407228326.fasta | tr -d "\n" | wc -c
  230  tail -n+2 407228412.fasta | tr -d "\n" | wc -c
  231  tail -n+2 E.coli.fasta | tr -d "\n" | wc -c

#This searches for the given sequence and reports only the sequence found
  232  tail -n+2 407228326.fasta | tr -d "\n" | grep -o "ATGTACATA"

#Displays this sequence data starting two lines down
  233  tail -n+2 407228326.fasta 
  
#This removes the new line command from the text
  234  tail -n+2 407228326.fasta | tr -d "\n"
  
#This looks up the manual for the tr command for "translating or deleting characters"
  235  man tr
  
#This displays only ATGC segments and then counts them
  236  tail -n+2 E.coli.fasta | tr -d "\n" | grep -o "ATGC" | wc -l
  
#This counts the number of AT vs GC nucleotides in the sequence
  237  tail -n+2 E.coli.fasta | tr -d "\n" | grep -o [A,T] | wc -l
  238  tail -n+2 E.coli.fasta | tr -d "\n" | grep -o [G,C] | wc -l


2.13.3
#this displays the bottom 13900 lines , then start at line 265, then build it into darwin.txt
$ head -n 13900 otoos10.txt | tail -n+265 |cat > darwin.txt

#Count the occurrences in darwin.txt of the terms “evolution” or “evolved”, appearing as
full words and ignoring case.
$ grep -w -i 'evolution\|evolved' darwin.txt | wc -l
1

#Searches the document for natural selection or wallace 
$ grep -w -i 'natural selection\|wallace' darwin.txt | wc -l
245

2.13.4
# this returns the TMAX line for every entry on the first of January
grep -r "180[0-3]0101,TMAX,"

This searches for the max temperature reported for 05 Feb 1800
$ grep -r "18000205,TMAX.*." | cut -d "," -f 2,4 | sort | tail -n1

This searches for the max temperature reported for 05 May 1800
$ grep -r "18000505,TMAX.*." | cut -d "," -f 2,4 | sort | tail -n1





Excercise pg32-33. Homework 3

This removes the new line character from behind each pair of coord. and replaces with a tab
Find: (\"[NS])\r
replace: \1\t

This removes the W+S components and replaces it with a "-"
Find: ([0-9]+ [0-9 \'\"\.]+)[WS]
replace: -\1


This deos the same for East and North, but does not replace with a sign
Find: ([0-9]+ [0-9 \'\"\.]+)[NE]
Replace: \1


Jonathans assignment
#Search for pass with your lower case first name
$ grep "robert" 10k-common-passwords.txt | wc -l
5

anything that starts with an "a"
$ grep "^a" 10k-common-passwords.txt | wc -l
451

only consist of numbers
$ grep -E "^\d+\d$" 10k-common-passwords.txt | wc -l
5

Search for any 5 letters followed by 2 numbers
$ grep -iE "[A-Z]{5}\d{2}" 10k-common-passwords.txt | wc -l
0

$ grep -E "(\w\w\w)\1" 10k-common-passwords.txt | wc -l
224

$ grep -iE "[A-Z]{5}\d{2}" 10k-common-passwords.txt | wc -l
0









##Lecture 1/20/15 - Jonathan Sub
#git set up
vagrant@data-science-toolbox:~$ git config --global user.name 'Robert Cooper'
vagrant@data-science-toolbox:~$ git config --global user.email 'rdcooper408@gmail.com'
vagrant@data-science-toolbox:~$ git config --global core.editor 'nano'
vagrant@data-science-toolbox:~$ git config --global --list 
user.name=Robert Cooper
user.email=rdcooper408@gmail.com
vagrant@data-science-toolbox:~$ mkdir starting-git
vagrant@data-science-toolbox:~$ cd starting-git/
vagrant@data-science-toolbox:~/starting-git$ git init
Initialized empty Git repository in /home/vagrant/starting-git/.git/
vagrant@data-science-toolbox:~/starting-git$ ls -a
.  ..  .git


#gives status when you do things
vagrant@data-science-toolbox:~/starting-git$ git status


#vagrant@data-science-toolbox:~/starting-git$ nano readme.txt
unix: "^" means "control key"

#add readme.txt to the repository
vagrant@data-science-toolbox:~/starting-git$ nano readme.txt
vagrant@data-science-toolbox:~/starting-git$ git add readme.txt
vagrant@data-science-toolbox:~/starting-git$ git status
vagrant@data-science-toolbox:~/starting-git$ git commit

#write a summary statement in imperative
#Top line is the summary I added "Add readme.txt"
vagrant@data-science-toolbox:~/starting-git$ git commit
[master (root-commit) 27f8326] Add readme.txt------------------------
 1 file changed, 1 insertion(+)
 create mode 100644 readme.txt

#get the log of what you did with the file:
vagrant@data-science-toolbox:~/starting-git$ git log


#now lets dirty it up to the readme file
$ nano readme.txt
#add a second line into the file

# checkout deletes your changes (worry about --, hard)
vagrant@data-science-toolbox:~/starting-git$ git add readme.txt
vagrant@data-science-toolbox:~/starting-git$ git commit





##### Branching #####
Allows you to rewind time and go back to previously committed files and edit them, and merge them

#creates new branch called "testing"
vagrant@data-science-toolbox:~/starting-git$ git branch testing

# shows the branches that are active and available
vagrant@data-science-toolbox:~/starting-git$ git branch

# switch to the testing brach
vagrant@data-science-toolbox:~/starting-git$ git checkout testing
Switched to branch 'testing'

# make commits on top of testing
vagrant@data-science-toolbox:~/starting-git$ nano teapot.txt
vagrant@data-science-toolbox:~/starting-git$ git add teapot.txt
vagrant@data-science-toolbox:~/starting-git$ git commit
#master is still pointing to the original file, but the testing is tracking current changes

#move back to master
vagrant@data-science-toolbox:~/starting-git$ git checkout master
#modify readme file in master directory
vagrant@data-science-toolbox:~/starting-git$ nano readme.txt
vagrant@data-science-toolbox:~/starting-git$ git add readme.txt
vagrant@data-science-toolbox:~/starting-git$ git commit

## Testing branch shares info with your master header

## lets merge the two directories back together
vagrant@data-science-toolbox:~/starting-git$ git merge testing

## see the graph of the changes in the different directories

vagrant@data-science-toolbox:~/starting-git$ git log --graph
